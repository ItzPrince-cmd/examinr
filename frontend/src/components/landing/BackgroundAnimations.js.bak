import React, { useEffect, useRef, useState } from 'react'; import { motion, AnimatePresence } from"framer-motion"; export function BackgroundAnimations({ currentSection }) { const canvasRef = useRef(null); const [particles, setParticles] = useState([]); // Enhanced more vibrant color schemes for different sections const colorSchemes = [ ['rgba(79, 70, 229, 0.3)', 'rgba(147, 51, 234, 0.3)', 'rgba(236, 72, 153, 0.3)'], // Hero ['rgba(59, 130, 246, 0.3)', 'rgba(99, 102, 241, 0.3)', 'rgba(16, 185, 129, 0.3)'], // Question Bank ['rgba(147, 51, 234, 0.3)', 'rgba(236, 72, 153, 0.3)', 'rgba(249, 115, 22, 0.3)'], // Test Creation ['rgba(245, 158, 11, 0.3)', 'rgba(249, 115, 22, 0.3)', 'rgba(59, 130, 246, 0.3)'], // Dashboard Preview ['rgba(16, 185, 129, 0.3)', 'rgba(59, 130, 246, 0.3)', 'rgba(168, 85, 247, 0.3)'], // Parallax Story ['rgba(244, 63, 94, 0.3)', 'rgba(168, 85, 247, 0.3)', 'rgba(79, 70, 229, 0.3)'] // CTA ]; // Initialize particles on component mount useEffect(() => { if (!canvasRef.current) return; const canvas = canvasRef.current; const ctx = canvas.getContext('2d'); if (!ctx) return; // Set canvas dimensions const setCanvasDimensions = () => { canvas.width = window.innerWidth; canvas.height = window.innerHeight}; // Optimize particle count for different devices const getOptimalParticleCount = () => { // Increased particles for more vibrant effect while maintaining performance const width = window.innerWidth; if (width <= 768) { return 20; // Mobile } else if (width <= 1280) { return 35; // Tablet/Small Desktop } else { return 50; // Large Desktop } }; // Initialize particles with optimized count const initParticles = () => { const particlesArray = []; const numberOfParticles = getOptimalParticleCount(); for (let i = 0; i < numberOfParticles; i++) { const size = Math.random() * 6 + 2; // Larger particles for more visible effect const x = Math.random() * canvas.width; const y = Math.random() * canvas.height; const speedX = Math.random() * 0.2 - 0.1; // Slightly increased speed for better dynamics const speedY = Math.random() * 0.2 - 0.1; const colorIndex = Math.floor(Math.random() * colorSchemes[currentSection].length); const color = colorSchemes[currentSection][colorIndex]; const alpha = Math.random() * 0.5 + 0.2; // Higher opacity for more vibrant look const growing = Math.random() > 0.5; particlesArray.push({ x, y, size, speedX, speedY, color, alpha, growing })} setParticles(particlesArray)}; // Set initial dimensions and particles setCanvasDimensions(); initParticles(); // Update canvas dimensions on window resize const handleResize = () => { setCanvasDimensions(); initParticles()}; window.addEventListener('resize', handleResize); return () => { window.removeEventListener('resize', handleResize)}}, []); // Update particles when current section changes useEffect(() => { if (!canvasRef.current || !particles.length) return; // Update particle colors when section changes const updatedParticles = particles.map(particle => { const colorIndex = Math.floor(Math.random() * colorSchemes[currentSection].length); return { ...particle, color: colorSchemes[currentSection][colorIndex] }}); setParticles(updatedParticles)}, [currentSection]); // Animation loop for particles with performance optimizations useEffect(() => { if (!canvasRef.current || !particles.length) return; const canvas = canvasRef.current; const ctx = canvas.getContext('2d'); if (!ctx) return; let animationFrameId; let lastUpdate = 0; const fps = 30; // Limit FPS for better performance const fpsInterval = 1000 / fps; const animate = (timestamp) => { // Throttle updates for better performance if (timestamp - lastUpdate < fpsInterval) { animationFrameId = requestAnimationFrame(animate); return} lastUpdate = timestamp; ctx.clearRect(0, 0, canvas.width, canvas.height); // Update and draw particles const updatedParticles = particles.map(particle => { // Update position particle.x += particle.speedX; particle.y += particle.speedY; // Bounce off edges if (particle.x < 0 || particle.x > canvas.width) { particle.speedX *= -1} if (particle.y < 0 || particle.y > canvas.height) { particle.speedY *= -1} // Pulse size effect with slightly increased range if (particle.growing) { particle.size += 0.03; if (particle.size > 7) { particle.growing = false} } else { particle.size -= 0.03; if (particle.size < 2) { particle.growing = true} } // Draw particle with glow effect ctx.save(); ctx.beginPath(); ctx.arc(particle.x, particle.y, particle.size, 0, Math.PI * 2); // Add glow effect const gradient = ctx.createRadialGradient( particle.x, particle.y, 0, particle.x, particle.y, particle.size * 2 ); gradient.addColorStop(0, particle.color); gradient.addColorStop(1, 'rgba(0, 0, 0, 0)'); ctx.fillStyle = gradient; ctx.globalAlpha = particle.alpha; ctx.fill(); ctx.restore(); return particle}); setParticles(updatedParticles); animationFrameId = requestAnimationFrame(animate)}; animationFrameId = requestAnimationFrame(animate); return () => { cancelAnimationFrame(animationFrameId)}}, [particles]); return ( <div className="fixed inset-0 z-0 pointer-events-none overflow-hidden"> {/* Canvas for particle animations */} <canvas ref={canvasRef} className="absolute inset-0 w-full h-full" /> {/* Grid pattern overlay */} <div className="absolute inset-0 opacity-10" style={{ backgroundImage: `url(${process.env.PUBLIC_URL}/patterns/grid.svg)`, backgroundSize: '40px 40px', backgroundRepeat: 'repeat' }}></div> {/* Additional background elements that change based on section */} <AnimatePresence mode="wait"> <motion.div key={`bg-${currentSection}`} initial={{ opacity: 0 }} animate={{ opacity: 1 }} exit={{ opacity: 0 }} transition={{ duration: 1 }} className="absolute inset-0 z-0" > {/* Enhanced glowing background patterns */} <div className="absolute inset-0 overflow-hidden"> {/* Animated gradient blobs that slowly move */} <motion.div className="absolute -top-[30%] -left-[10%] w-[70%] h-[70%] rounded-full bg-gradient-to-br from-primary/10 via-secondary/15 to-transparent blur-[100px]" animate={{ x: [0, 20, 0], y: [0, -20, 0], scale: [1, 1.1, 1] }} transition={{ duration: 20, repeat: Infinity, repeatType:"reverse" }} /> <motion.div className="absolute -bottom-[20%] -right-[10%] w-[60%] h-[60%] rounded-full bg-gradient-to-tl from-secondary/10 via-accent/15 to-transparent blur-[100px]" animate={{ x: [0, -30, 0], y: [0, 20, 0], scale: [1, 1.15, 1] }} transition={{ duration: 25, repeat: Infinity, repeatType:"reverse" }} /> <motion.div className="absolute top-[30%] right-[20%] w-[40%] h-[40%] rounded-full bg-gradient-to-bl from-accent/10 via-primary/15 to-transparent blur-[80px]" animate={{ x: [0, 20, 0], y: [0, 20, 0], scale: [1, 1.2, 1] }} transition={{ duration: 18, repeat: Infinity, repeatType:"reverse" }} /> <motion.div className="absolute top-[50%] left-[20%] w-[30%] h-[30%] rounded-full bg-gradient-to-tr from-primary/15 via-accent/10 to-transparent blur-[80px]" animate={{ x: [0, -15, 0], y: [0, -25, 0], scale: [1, 1.1, 1] }} transition={{ duration: 22, repeat: Infinity, repeatType:"reverse" }} /> </div> {currentSection === 0 && ( /* Hero section background */ <div className="absolute inset-0"> <div className="absolute top-0 right-0 w-1/3 h-1/3 bg-gradient-to-b from-primary/15 to-transparent rounded-full blur-3xl" /> <div className="absolute bottom-0 left-0 w-1/2 h-1/2 bg-gradient-to-t from-secondary/15 to-transparent rounded-full blur-3xl" /> <div className="absolute top-1/3 left-1/4 w-1/4 h-1/4 bg-gradient-to-tr from-accent/10 to-transparent rounded-full blur-3xl" /> </div> )} {currentSection === 1 && ( /* Question bank section background */ <div className="absolute inset-0"> <div className="absolute top-1/4 left-1/4 w-1/2 h-1/2 bg-gradient-to-br from-blue-500/15 to-primary/10 rounded-full blur-3xl" /> <div className="absolute bottom-0 right-1/4 w-1/3 h-1/3 bg-gradient-to-tr from-blue-600/15 to-transparent rounded-full blur-3xl" /> <div className="absolute top-0 right-1/3 w-1/4 h-1/4 bg-gradient-to-b from-emerald-500/10 to-transparent rounded-full blur-3xl" /> </div> )} {currentSection === 2 && ( /* Test creation section background */ <div className="absolute inset-0"> <div className="absolute top-0 left-1/3 w-1/3 h-1/3 bg-gradient-to-b from-secondary/15 to-transparent rounded-full blur-3xl" /> <div className="absolute bottom-1/4 right-1/4 w-1/2 h-1/2 bg-gradient-to-tr from-purple-500/15 to-pink-500/10 rounded-full blur-3xl" /> <div className="absolute top-1/2 left-1/4 w-1/4 h-1/4 bg-gradient-to-br from-orange-500/10 to-transparent rounded-full blur-3xl" /> </div> )} {currentSection === 3 && ( /* Dashboard preview section background */ <div className="absolute inset-0"> <div className="absolute top-1/3 left-0 w-2/3 h-1/3 bg-gradient-to-r from-orange-500/15 to-amber-500/10 rounded-full blur-3xl" /> <div className="absolute bottom-0 right-0 w-1/3 h-1/2 bg-gradient-to-tl from-orange-600/15 to-transparent rounded-full blur-3xl" /> <div className="absolute top-0 left-1/4 w-1/4 h-1/4 bg-gradient-to-b from-blue-500/10 to-transparent rounded-full blur-3xl" /> </div> )} {currentSection === 4 && ( /* Parallax story section background */ <div className="absolute inset-0"> <div className="absolute top-0 right-1/4 w-1/2 h-1/2 bg-gradient-to-b from-green-500/15 to-blue-500/10 rounded-full blur-3xl" /> <div className="absolute bottom-1/3 left-1/4 w-1/3 h-1/3 bg-gradient-to-tr from-emerald-500/15 to-transparent rounded-full blur-3xl" /> <div className="absolute top-1/2 right-0 w-1/4 h-1/4 bg-gradient-to-bl from-purple-500/10 to-transparent rounded-full blur-3xl" /> </div> )} {currentSection === 5 && ( /* CTA section background */ <div className="absolute inset-0"> <div className="absolute top-1/4 left-1/4 w-1/2 h-1/2 bg-gradient-to-br from-red-500/15 via-purple-500/10 to-transparent rounded-full blur-3xl" /> <div className="absolute bottom-0 right-1/3 w-1/3 h-1/3 bg-gradient-to-tr from-pink-500/15 to-transparent rounded-full blur-3xl" /> <div className="absolute top-0 left-0 w-1/4 h-1/4 bg-gradient-to-r from-primary/10 to-transparent rounded-full blur-3xl" /> </div> )} </motion.div> </AnimatePresence> </div> )}